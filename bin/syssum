#!/usr/bin/python3

#from pathlib import Path
import re, sys, os, getopt


ROOTPATH = "/proc"
STATFILE = "stat"
STATUSFILE = "status"
CMDLINE = "cmdline"
CMDLINE_LEN = 40

DEFUALT_FILTER_NAME = "name"
DEFUALT_FILTER_VALUE = ""

EXECSTATE = {
 'R': "running",
 'S': "sleeping", 
 'D': "disk sleep", 
 'T': "stopped", 
 'T': "tracing stop", 
 'Z': "zombie",
 'X': "dead"	
}

SUPPORTED_FIELDS = [
	'pid', 'ppid','name','state','size','swaped','threads','peak','csize','cmdline'
]

def is_daemon( pid ):
	filename = ROOTPATH+"/"+pid+"/"+STATFILE
	try:
		fd = open( filename, "r" )

		line = fd.readline()

		fd.close()

		elements = line.split()
		if( elements[3] == "1" ):
			return True

		return False

	except Exception as error:
		raise

	return False


def commandline( pid ):
	filename = ROOTPATH+"/"+pid+"/"+CMDLINE
	try:
		fd = open( filename, "r" )

		line = fd.readline()

		fd.close()


		return line

	except Exception as error:
		raise

	return ""



def list_processes( path ):

	pre = re.compile('[0-9]+')
	proclist = []

	try:
#		path = Path( path )
#		for x in path.iterdir():
#			xs = x.name
		
		for xs in os.listdir( path ):

			if pre.match( xs ):
				proclist.append( xs )

		return proclist

	except Exception as error:
		raise

	return None

def list_ppid( path, ppid ):

	processlist = list_processes( path )

	result = []
	for pid in processlist:
		filename = path+"/"+pid+"/"+STATFILE

		try:
			fd = open( filename, "r" )
			line = fd.readline()
			fd.close()

			elements = line.split()
			if( elements[3] == str( ppid ) ):
				result.append( pid )			


		except Exception as error:
			raise


	return result

def list_daemons( path ):
	return list_ppid( path, "1" )

def list_children( path, pid ):
	return list_ppid( path, pid )	

def process_info_stat( pid ):
	filename = ROOTPATH+"/"+pid+"/"+STATFILE

	try:
		fd = open( filename, "r" )
		line = fd.readline().strip()
		fd.close()

		info = line.split()
		info[1] = info[1].strip('()')

		return info

	except Exception as error:
		raise

	return None


def process_info_status( pid ):
	filename = ROOTPATH+"/"+pid+"/"+STATUSFILE

	info = {}

	try:
		fd = open( filename, "r" )
		for line in fd:
			if not 'pid' in info and re.match( r'^Pid:', line ): info['pid'] = line.strip().split()[1]
			if not 'ppid' in info and re.match( r'^PPid:', line ): info['ppid'] = line.strip().split()[1]
			if not 'name' in info and re.match( r'^Name:', line ): info['name'] = line.strip().split()[1]
			if not 'threads' in info and re.match( r'^Threads:', line ): info['threads'] = line.strip().split()[1]
			if not 'size' in info and re.match( r'^VmSize:', line ): info['size'] = line.strip().split()[1]
			if not 'peak' in info and re.match( r'^VmPeak:', line ): info['peak'] = line.strip().split()[1]
			if not 'csize' in info and re.match( r'^VmLib:', line ): info['csize'] = line.strip().split()[1]
			if not 'swaped' in info and re.match( r'^VmSwap:', line ): info['swaped'] = line.strip().split()[1]
			if not 'state' in info and re.match( r'^State:', line ): info['state'] = EXECSTATE[ line.strip().split()[1] ]

			info['cmdline'] = commandline( pid )
	
		return info

	except Exception as error:
		raise

	return None


def process_info( pid ):
	return process_info_status( pid )


def filter_process( name, value, options ):

#	print("options: %(options)s" % {'options':options.__str__()} )

	daemon = False
	regexp = False
	compare = "eq"

	if( 'daemon' in options ): daemon = options['daemon']
	if( 'regexp' in options ): regexp = options['regexp']
	if( 'compare' in options ): compare = options['compare']

#	print(">>> D:%(daemon)s R:%(regexp)s C:%(compare)s" % { 'daemon': daemon, 'regexp': regexp, 'compare': compare}) 

	result = []
	try:

		if daemon:
			processlist = list_ppid( ROOTPATH, "1")
		else:
			processlist = list_processes( ROOTPATH )


		for p in processlist:
			info = process_info( p )

			if name in info:
			
				if( isinstance( value, int ) ):

					if( int( info[name] ) >= value ): 
						result.append( p )
				
				else:

					if( regexp ):
						if( re.match( value, info[name] ) ):
							result.append( p )						
					else:
						if( info[name] == value ):
							result.append( p )

			else:
				print("WARN: Could not load name from process %(proc)" % {'proc': p})

		return result
	except Exception as error:
		raise

	return result


def print_list( plist, **argv ):
	print("Found %(pnum)s processes" % { 'pnum': len( plist ) } )
	print("# %(pid)6s | %(ppid)6s | %(name)16s | %(state)10s | %(flag)10s | %(size)10s | %(cmdline)s" %  { 'cmdline':"Command" , 'size': "Size" , 'pid': "Pid", 'ppid': "PPid", 'name':"Name", 'state': "State", 'flag': "Flag" } )

	for p in plist:
		info = process_info( p )

		flag = ""
		if info['ppid'] == "1": 
			flag = "(daemon)"
			
		if len( info['cmdline'] ) > CMDLINE_LEN :
			cmdline = info['cmdline'][0:CMDLINE_LEN]+"..."
		else:
			cmdline = info['cmdline']
			
		print("> %(pid)6s | %(ppid)6s | %(name)16s | %(state)10s | %(flag)10s | %(size)10s | %(cmdline)s" % { 'cmdline': cmdline ,'size': info['size'] , 'pid': info['pid'], 'ppid': info['ppid'], 'name': info['name'], 'state': info['state'], 'flag': flag } )

	pass

def print_help( script = sys.argv[0] ):
	print("Help for %(script)s" % { 'script': script } )
	print("%(script)s  <task> [options]" % { 'script': script })
	print("%(script)s  list \t (default)" % { 'script': script })
	print("%(script)s  daemons" % { 'script': script })
	print("%(script)s  search [options]" % { 'script': script })
	print("Search options:")
	print("\t-n|--name <searchkey>    \t Process info key to filter by")
	print("\t-n|--value <searchvalue> \t Process info value to search for")	
	print("\t-r|--regexp \t\t\t Apply regexp match on search values")
	print("Search: supported names: %(namelist)s" % {'namelist': SUPPORTED_FIELDS.__str__() })
	print("Example: ")
	print("%(script)s search -name state -value running" % { 'script': script })
	print("%(script)s search -n state -v run -regexp" % { 'script': script })
	print("%(script)s search -n swaped -v 1024" % { 'script': script })
	print("")
	pass

############################################################################

inparams = sys.argv

script = inparams.pop(0)
filter_key = 'name'
filter_val = None

task = 'list'
if len( sys.argv ) > 0 : 
	task = inparams.pop(0)


if( task == 'help'):
	print_help( script )
	sys.exit(0)

#print(" %(script)s >> %(task)s " % {'script': script, 'task': task} )
#print("%(argv)s" % {'argv': inparams.__str__() } )

try:
	if task == 'list':
		print_list( list_processes( ROOTPATH ) )
	elif task == 'daemons': 
		print_list( list_daemons( ROOTPATH ) )
	elif task == 'search':


		try:
			optlist, args = getopt.getopt( inparams, "Drn:v:", ["name","value","regexp","daemon"])
		except getopt.GetoptError as err:
			print("Options: %(error)s" % { 'error': err.__str__() } )
			sys.exit(1)

		name = DEFUALT_FILTER_NAME
		value = DEFUALT_FILTER_VALUE
		regexp = False
		daemon = False
		compare = 'ge'


		for opt,arg in optlist:
			if( opt   in ("-n","--name") ): name = arg
			elif( opt in ("-v","--value") ): value = arg
			elif( opt in ("-r", "--regexp") ): regexp = True
			elif( opt in ("-D", "--daemon") ): daemon = True
			elif( opt in ("-ge") ): compare = "ge"
			elif( opt in ("-le") ): compare = "le"
			elif( opt in ("-eq") ): compare = "eq"
						

#		print(">>>> %(list)s" % {'list':filter_process( name, value )} )
		print_list( filter_process( name, value, { 	'regexp': regexp, 
													'daemon': daemon, 
													'compare': compare  
												 } ) )
	else:
		raise 

except Exception  as error:
	print("ERROR: %(error)s" % { 'error': error.__str__() } )
############################################################################


#plist = list_processes( ROOTPATH )
#dlist = list_ppid( ROOTPATH, "1" )

#print("Found %(plist_len)i processes of which %(dlist_len)i are daemons" % { 'plist_len':len(plist), 'dlist_len': len( dlist ) })
#print("Local daemons are:")
#for d in dlist:
#	print( "%(pid)5s > %(process_info)s " % {'pid': d, 'process_info': process_info_stat( d )[1] } )
#	print( "\t > %(cpid)s " % {'cpid': list_ppid( ROOTPATH, d ) } )

#for d in dlist:
#	info = process_info( d )
#	print("inf: %(info)s" % { 'info': info.__str__() })
#	print("%(pid)s > %(name)s S: %(state)s" % {'pid': d , 'name': info['name'], 'state': info['state'] })
#	print( "\t > %(cpid)s " % {'cpid': list_ppid( ROOTPATH, d ) } )


#print("1F: %(info)s" % { 'info': filter_process( 'state', 'running') })
#print("2F: %(info)s" % { 'info': filter_process( 'threads', 5 ) })
#print("3F: %(info)s" % { 'info': filter_process( 'name', 'smbd') })
#print("4F: %(info)s" % { 'info': filter_process( 'swaped', 1 ) })
#print("5F: %(info)s" % { 'info': filter_process( 'size', 500000 ) })
#print("6F: %(info)s" % { 'info': filter_process( 'name', 'smbd', True ) })

#if isinstance( 10, int ): print("1Number")
#if isinstance( "10", int ): print("2Number")
#if isinstance( "10", str ): print("2String")
#if isinstance( "10", str ): print("3String")


#import cProfile
#cProfile.run( "filter_process( 'state', 'running')")
#cProfile.run( "filter_process( 'threads', 5 )" )
#cProfile.run( "filter_process( 'name', 'smbd')")
#cProfile.run( "filter_process(  'swaped', 1 )")
#cProfile.run( "filter_process(  'size', 500000 )")

#print( int("123"))
#print( int("abc")) throws exception
