#!/usr/bin/ruby

require 'getoptlong'


current_dir = File.dirname( __FILE__ )
lib_dir = current_dir+"/../rlib"
$LOAD_PATH.unshift( lib_dir )
#puts "DEBUG #{__LINE__}: Load path is "+$LOAD_PATH.to_s() 



require 'json'
require 'yaml'

require 'config'
require 'database'
require 'util'


#####################################################################################################
########## CONSTANTS
#####################################################################################################
JSON_ENDING = ".json"
CONFIG="enc.json"
DEBUG = false




#####################################################################################################
########## FUNCTIONS
#####################################################################################################

def init_database( db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Update profile, Missing database connection "+"\n" if( not db )

	begin
		STDOUT.puts("Initializing the database")
		db.initdb()
		
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end
end

def add_profile( db, profile, infile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Add profile, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Add profile, Missing profile "+"\n" if( not profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Add profile, Missing reference file "+"\n" if( not infile )

	begin
		db.insert( profile, EncUtil.load_json( infile ) )
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end

end

def del_profile( db, profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Del profile, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Del profile, Missing profile "+"\n" if( not profile )

	begin
		db.delete( profile )
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end

end

def del_host( db, host )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Del host, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Del host, Missing host "+"\n" if( not host )

	begin
		db.delete( host )
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end

end

def update_profile( db, profile, infile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Update profile, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Update profile, Missing profile "+"\n" if( not profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Update profile, Missing reference file "+"\n" if( not infile )

	begin

		db.update( profile, EncUtil.load_json( infile ) )
		
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end
end

def profile_list( db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: List profile, Missing database connection "+"\n" if( not db )

	begin
		puts("=================================================================")	
		filelist = db.list()
		if( filelist.length() > 0 )
			puts("Found #{filelist["profile"].length()} profiles and #{filelist["host"].length()} hosts with #{filelist["bound"].length()} bound hosts")

			puts("Profiles:\n")
			filelist["profile"].each do |x|
				puts( "\t>> "+x.to_s+"\n")
			end
			
			puts("Hosts:\n")
			filelist["host"].each do |x|
				puts( "\t>> "+x.to_s+"\n")
			end

			puts("Bound Hosts:\n")
			filelist["bound"].each do |x|
				puts( "\t>> "+x[0].to_s+" => "+x[1].to_s+"\n")
			end
			
		else
			puts("No profiles found")
		end
		puts("=================================================================")	

	rescue
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: List profile, fetching list "+"\n" if( not db )
	end
end

def fetch_profile( db, profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Fetch profile, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Fetch profile, Missing profile "+"\n" if( not profile )

	begin
		
		puts( db.fetch( profile ) )
		
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end
end

def bind_profile( db, hostname, profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Bind profile, Missing database connection "+"\n" if( not db )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Bind profile, Missing profile "+"\n" if( not profile )
	raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: Bind profile, Missing hostname "+"\n" if( not hostname )
	

	begin
		
		reply = db.bind( hostname, profile )
		if( reply.length() == 2 )
			puts( "Bound #{reply[0]} => #{reply[1]}"+"\n")
		else
			puts( "Failed to bind #{hostname} to #{profile}"+"\n")
		end
	rescue => error
		raise ArgumentError, "ERROR #{__FILE__}/#{__LINE__}: "+error.to_s+"\n"
	end
end

def print_help()
	STDOUT.puts( "encadm <task> <options>"+"\n" )

	STDOUT.puts( "Supported task are [help|add|del|mod|list|fetch|bind]"+"\n" )

	STDOUT.puts( "\n" )
	STDOUT.puts( "Tasks:\n" )
	STDOUT.puts( "\thelp\tThis help printout\t\tRequires:[]"+"\n" )
	
	STDOUT.puts( "\tinit\tInitialize the database\tRequires:[]"+"\n" )
	STDOUT.puts( "\tadd\tAdd a prfile and filename\tRequires:[profile,file]"+"\n" )
	STDOUT.puts( "\tmod\tModify existing profile\tRequires:[profile, file]"+"\n")
	STDOUT.puts( "\tdel\tDelete a profile\t\tRequires:[profile]"+"\n" )
	STDOUT.puts( "\tlist\tList available profiles\t\tRequires:[]"+"\n" )
	STDOUT.puts( "\tfetch\tFetch a profile content\t\tRequires:[profile]"+"\n" )
	STDOUT.puts( "\tbind\tBind a host to a profile\t\tRequires:[host,profile]"+"\n" )
	STDOUT.puts( "\t"+"\n" )
	
	STDOUT.puts( "Options:\t"+"\n" )
	STDOUT.puts( "\t--help\t\t-h\tThis help"+"\n" )
	STDOUT.puts( "\t--debug\t\t-d\tEnable debugging"+"\n" )
	STDOUT.puts( "\t--profile\t-p\tProfile name"+"\n" )
	STDOUT.puts( "\t--file\t\t-i\tFilename to use as source"+"\n" )
	STDOUT.puts( "\t--host\t\t-H\tHost (cert) name"+"\n" )

end


#####################################################################################################
########## MAIN
#####################################################################################################

etc_dir = current_dir+"/../etc"
enc_dir = current_dir+"/../enc"
debug = DEBUG

profile = nil
infile = nil
hostname = nil

task = ARGV[0] ? ARGV.shift() : "list"

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--profile', '-p', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--host', '-H', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--file', '-i', GetoptLong::OPTIONAL_ARGUMENT ],
)

opts.each do |opt, arg|
	case opt 
		when "--debug"
			debug = true
		when "--help"
			print_help()
			exit()
		when "--profile"
			profile = arg
		when "--file"
			infile = arg
		when "--host"
			hostname = arg
		else
			STDERR.puts("ERROR #{__FILE__}/#{__LINE__}: Option #{opt} is not supported"+"\n")
			exit(-1)
	end
end



##---------------------------------------------------------------------------------------------------
##---------------- Load Config
##---------------------------------------------------------------------------------------------------
begin 
	conf = EncConfig.new( etc_dir+"/"+CONFIG ) ## Lets initialize the conf variable (global) with nil, for later usage
	
	if( conf != nil and conf.key?( "enc.debug") and conf.key("enc.debug") == "true" )
		debug = true
	end
	
	if( debug )
		STDERR.puts "DEBUG #{__FILE__}/#{__LINE__}: Supported options "+conf.options().to_s()+"\n"
		conf.options().each{ |k| STDERR.puts "DEBUG #{__FILE__}/#{__LINE__}: Default value for #{k} => "+conf.default( k ).to_s()+"\n" }
	end
	
	STDERR.puts( "DEBUG #{__FILE__}/#{__LINE__}: Current script dirrectory is #{current_dir} " ) if debug
	
	## After we have tried to load the config, lets check if we actually loaded any data into it
	if( conf == nil )
		
		STDERR.puts("ERROR #{__FILE__}/#{__LINE__}: No confg was loaded from #{CONFIG}"+"\n")
	
		exit(1)
	end

	
rescue => error
	STDERR.puts( "ERROR #{__FILE__}/#{__LINE__}: No confg was loaded from #{CONFIG}:"+"\n"+error.to_s )
	exit(1)	
end


##---------------------------------------------------------------------------------------------------
##---------------- Search database
##---------------------------------------------------------------------------------------------------
begin
	
	engine = conf.key?( "db.engine" ) ? conf.key( "db.engine") : DB_TYPE
	db = EncDatabase.new( engine, conf, debug )

rescue => error
	STDERR.puts("ERROR #{__FILE__}/#{__LINE__}: No data has been found: "+"\n"+error.to_s ) if( debug )
	exit(1)
end


##---------------------------------------------------------------------------------------------------
##---------------- Run task
##---------------------------------------------------------------------------------------------------
begin
	case task
		when "init"
	    	init_database( db )
	    when "add"
	    	add_profile( db, profile, infile )
	    when "del"
	    	what = hostname ? hostname : profile
	    	del_profile( db, what )
	    when "list"
	    	profile_list( db )
	    when "fetch"
	    	fetch_profile( db, profile )
	    when "mod"
	    	update_profile( db, profile, infile )
	    when "bind"
	    	bind_profile( db, hostname, profile )	    	
	    when "help"
			print_help()
			exit()
	    else
	        STDERR.puts("ERROR: No such task: #{task}")
	        exit(-1)
	end

rescue => error
	STDERR.puts( "ERROR #{__FILE__}/#{__LINE__}: Task could not run "+"\n"+error.to_s )
	exit(1)	
end


