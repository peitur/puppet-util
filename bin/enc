#!/usr/bin/ruby


require 'json'
require 'yaml'

ENDING = ".json"
DEFAULT="default.json"
CONFIG="etc/enc.json"
DEBUG = false

STRICTMATCH = "default"

## Scan the enc directory for a pattern file
def scan_enc( dir, pattern )
	return nil if dir == nil
	return nil if pattern == nil

	filelist = Array.new()

	if Dir.exists?( dir )
		Dir.foreach( dir ) do |filename| 

			if(  filename.match( /^\./ ) )
				next
			end	

			if( /^#{pattern}#{ENDING}$/.match( filename ) )
				filelist.push( filename )
			end

		end
	else
		
		STDERR.puts "ERROR: Could not find directory to scan #{dir}" if @debug
		
		return nil
	end



	return filelist
end


## Load the enc file detected 
def load_json( filename )

	## 
	if( File.exists?( filename ) )		
		## Lets open it and parse it into a config object (hash)
		begin

			nodedata = JSON.load( File.open( filename ) )
			if( @conf != nil and nodedata != nil and nodedata.has_key?("include") )
				include_file = @conf["enc.path"]+"/"+nodedata["include"]
				
#				nodedata.merge!( load_json( include_file ) ).delete( "include" )
				load_json( include_file ).each do |k,v|
					if( ! nodedata.has_key?( k ) )
						nodedata[k] = v
					end
				end
				
				STDERR.puts "Including #{include_file}" if( @debug )
				nodedata.delete( "include" )
			end
	

			return nodedata
			
		rescue => error  ## Catching everything this time, no need to be picky
			
			STDERR.puts "ERROR: #{error} \n" if( @debug )

			return nil
		end
	else
		STDERR.puts "ERROR: Could not find config file #{filename} \n" if( @debug )

		return nil
	end

end

#####################################################################################################

@conf = load_json( CONFIG ) ## Lets initialize the conf variable (global) with nil, for later usage


@debug = DEBUG
if( @conf != nil and @conf.has_key?( "enc.debug") and @conf["enc.debug"] == "true" )
	@debug = true
end

## After we have tried to load the config, lets check if we actually loaded any data into it
if( @conf == nil )
	
	STDERR.puts("ERROR: No confg was loaded from #{CONFIG}") if( @debug )

	exit(1)
end


## must have a pattern as only input argument, else must exit without other output
search = ARGV[0] or exit(1)

## get file list, but if nil is retrned, just exit without output
filelist = scan_enc( @conf['enc.path'], search ) or exit()


## If the node didn't match to anything, use the default config file
if( filelist.length() == 0 )
	if( @conf.has_key?('enc.match') )
		case @conf['enc.match']
			when "strict" then STDERR.puts("ERROR: No data has been found") if( @debug )
			when "allow" then filelist.push( DEFAULT )
			else 
				filelist.push( DEFAULT )
		end
	end
end


puts YAML.dump( load_json( @conf['enc.path']+"/"+filelist[0] ) ) if( filelist.length() > 0 )


## Lets terminate nodemally
exit(0)